CREATE TABLE IF NOT EXISTS orders (
    order_uid VARCHAR(255) PRIMARY KEY,
    track_number VARCHAR(255) UNIQUE,
    entry VARCHAR(255),
    locale VARCHAR(10),
    internal_signature VARCHAR(255),
    customer_id VARCHAR(255),
    delivery_service VARCHAR(50),
    shardkey VARCHAR(10),
    sm_id INTEGER,
    date_created TIMESTAMP,
    oof_shard VARCHAR(10)
);
CREATE TABLE IF NOT EXISTS delivery (
    order_uid VARCHAR(255) PRIMARY KEY,
    name VARCHAR(255),
    phone VARCHAR(20),
    zip VARCHAR(20),
    city VARCHAR(255),
    address VARCHAR(255),
    region VARCHAR(255),
    email VARCHAR(255),
    FOREIGN KEY (order_uid) REFERENCES orders(order_uid)
);
CREATE TABLE IF NOT EXISTS items (
    item_id SERIAL PRIMARY KEY,
    chrt_id INTEGER,
    track_number VARCHAR(255),
    price INTEGER,
    rid VARCHAR(255),
    name VARCHAR(255),
    sale INTEGER,
    size VARCHAR(10),
    total_price INTEGER,
    nm_id INTEGER,
    brand VARCHAR(255),
    status INTEGER,
    FOREIGN KEY (track_number) REFERENCES orders(track_number)
);
CREATE TABLE IF NOT EXISTS payment (
    transaction VARCHAR(255) PRIMARY KEY REFERENCES orders(order_uid),
    request_id VARCHAR(255),
    currency VARCHAR(10),
    provider VARCHAR(50),
    amount INTEGER,
    payment_dt INTEGER,
    bank VARCHAR(50),
    delivery_cost INTEGER,
    goods_total INTEGER,
    custom_fee INTEGER,
);

SELECT *
FROM orders
JOIN delivery ON orders.order_uid = delivery.order_uid
JOIN payment ON orders.order_uid = payment.transaction
JOIN items ON orders.track_number = items.track_number;


DELETE FROM delivery;
DELETE FROM payment;
DELETE FROM items;
DELETE FROM orders;

SELECT *
FROM orders
JOIN delivery ON orders.order_uid = delivery.order_uid
JOIN payment ON orders.order_uid = payment.transaction
JOIN items ON orders.track_number = items.track_number;

SELECT * FROM orders;
SELECT * FROM delivery;
SELECT * FROM items;
SELECT * FROM payment;


